// app/dev/my-clients/page.tsx
import { supabase } from "@/lib/supabase";

type ClientRow = { id: string; name: string };
type ModelRow = { id: string; client_id: string; level: string; status: string };
type MilestoneRow = { id: string; model_id: string; title: string; done: boolean };
type KpiRow = { id: string; model_id: string; key: string; target: number | null; value: number | null; period: string | null };

export default async function MyClientsDevPage() {
  // 1) Read basic lists
  const [{ data: clients, error: clientsError }, { data: models, error: modelsError }, { data: milestones, error: milestonesError }, { data: kpis, error: kpisError }] =
    await Promise.all([
      supabase.from("clients").select("id,name").order("name", { ascending: true }),
      supabase.from("models").select("id,client_id,level,status").order("created_at", { ascending: true }),
      supabase.from("milestones").select("id,model_id,title,done").order("created_at", { ascending: true }),
      supabase.from("kpis").select("id,model_id,key,target,value,period").order("period", { ascending: true }),
    ]);

  // 2) Simple error surface (dev only)
  const err = clientsError || modelsError || milestonesError || kpisError;

  // 3) Group helpers
  const modelsByClient = new Map<string, ModelRow[]>();
  (models ?? []).forEach((m) => {
    const arr = modelsByClient.get(m.client_id) ?? [];
    arr.push(m);
    modelsByClient.set(m.client_id, arr);
  });

  const milestonesByModel = new Map<string, MilestoneRow[]>();
  (milestones ?? []).forEach((ms) => {
    const arr = milestonesByModel.get(ms.model_id) ?? [];
    arr.push(ms);
    milestonesByModel.set(ms.model_id, arr);
  });

  const kpisByModel = new Map<string, KpiRow[]>();
  (kpis ?? []).forEach((k) => {
    const arr = kpisByModel.get(k.model_id) ?? [];
    arr.push(k);
    kpisByModel.set(k.model_id, arr);
  });

  return (
    <main className="p-6 space-y-8">
      <header className="space-y-2">
        <h1 className="text-2xl font-bold">Dev: My Clients (read-only)</h1>
        <p className="text-sm text-slate-600">
          This page reads <code>clients</code>, <code>models</code>, <code>milestones</code>, and <code>kpis</code> directly. RLS is open in dev mode.
        </p>
        <ul className="list-disc ml-6 text-sm">
          <li>Env: URL: {process.env.NEXT_PUBLIC_SUPABASE_URL ? "✅ set" : "❌ missing"} | Key: {process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? "✅ set" : "❌ missing"}</li>
        </ul>
      </header>

      {err ? (
        <div className="rounded-lg border border-red-200 bg-red-50 p-4 text-red-700">
          <p className="font-semibold">Error</p>
          <pre className="text-xs whitespace-pre-wrap">{err.message}</pre>
        </div>
      ) : null}

      <section className="space-y-4">
        {(clients ?? []).map((c) => {
          const clientModels = modelsByClient.get(c.id) ?? [];
          return (
            <div key={c.id} className="rounded-xl border border-slate-200 p-4">
              <h2 className="text-lg font-semibold">Client: {c.name}</h2>

              {clientModels.length === 0 ? (
                <p className="text-sm text-slate-500 mt-2">No models yet.</p>
              ) : (
                <div className="mt-3 space-y-4">
                  {clientModels.map((m) => {
                    const ms = milestonesByModel.get(m.id) ?? [];
                    const ks = kpisByModel.get(m.id) ?? [];
                    return (
                      <div key={m.id} className="rounded-lg border border-slate-100 p-3">
                        <p className="font-medium">
                          Model: <span className="uppercase">{m.level}</span> <span className="text-slate-500">({m.status})</span>
                        </p>

                        <div className="mt-2 grid gap-3 md:grid-cols-2">
                          <div>
                            <p className="text-sm font-semibold">Milestones</p>
                            <ul className="mt-1 text-sm list-disc ml-5">
                              {ms.length === 0 ? <li className="text-slate-500">None</li> : ms.map((x) => <li key={x.id}>{x.title} {x.done ? "✅" : "⏳"}</li>)}
                            </ul>
                          </div>
                          <div>
                            <p className="text-sm font-semibold">KPIs</p>
                            <ul className="mt-1 text-sm list-disc ml-5">
                              {ks.length === 0 ? (
                                <li className="text-slate-500">None</li>
                              ) : (
                                ks.map((k) => (
                                  <li key={k.id}>
                                    {k.key}: {k.value ?? "—"} / target {k.target ?? "—"} {k.period ? `(${k.period})` : ""}
                                  </li>
                                ))
                              )}
                            </ul>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          );
        })}
      </section>
    </main>
  );
}
